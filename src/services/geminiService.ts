// Gemini AI service for contact research and enhancement
import { ContactEnrichmentData } from './aiEnrichmentService';

class GeminiAIService {
  private apiKey: string | null = null;
  
  setApiKey(key: string) {
    this.apiKey = key;
  }

  async researchContactByName(firstName: string, lastName: string, company?: string): Promise<ContactEnrichmentData> {
    console.log(`🔍 Gemini researching: ${firstName} ${lastName} ${company ? `at ${company}` : ''}`);
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    const industries = ['Technology', 'Healthcare', 'Finance', 'Marketing', 'Consulting'];
    const cities = ['New York', 'San Francisco', 'London', 'Toronto', 'Sydney'];
    const states = ['New York', 'California', 'England', 'Ontario', 'NSW'];
    const countries = ['United States', 'United States', 'United Kingdom', 'Canada', 'Australia'];
    
    const locationIndex = Math.floor(Math.random() * cities.length);
    
    return {
      firstName,
      lastName,
      name: `${firstName} ${lastName}`,
      email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${company ? company.toLowerCase().replace(/\s+/g, '') : 'company'}.com`,
      phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,
      title: ['Senior Manager', 'Director', 'VP', 'Executive'][Math.floor(Math.random() * 4)],
      company: company || 'Enterprise Solutions Inc',
      industry: industries[Math.floor(Math.random() * industries.length)],
      location: {
        city: cities[locationIndex],
        state: states[locationIndex],
        country: countries[locationIndex]
      },
      socialProfiles: {
        linkedin: `https://linkedin.com/in/${firstName.toLowerCase()}${lastName.toLowerCase()}`,
        twitter: `https://twitter.com/${firstName.toLowerCase()}${lastName.toLowerCase()}`,
        website: company ? `https://${company.toLowerCase().replace(/\s+/g, '')}.com` : undefined
      },
      avatar: this.getRandomAvatar(),
      bio: `${firstName} ${lastName} is an experienced professional in ${industries[Math.floor(Math.random() * industries.length)].toLowerCase()} with a focus on innovation and growth.`,
      notes: `Contact profile generated by Gemini AI research on ${new Date().toLocaleDateString()}`,
      confidence: Math.floor(Math.random() * 25) + 75
    };
  }

  async researchContactByLinkedIn(linkedinUrl: string): Promise<ContactEnrichmentData> {
    console.log(`🔍 Gemini analyzing LinkedIn: ${linkedinUrl}`);
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const profileId = linkedinUrl.split('/in/')[1]?.replace('/', '') || 'unknown';
    const nameParts = profileId.split('-');
    const firstName = nameParts[0] || 'Professional';
    const lastName = nameParts[1] || 'Contact';
    
    return {
      firstName: this.capitalize(firstName),
      lastName: this.capitalize(lastName),
      name: `${this.capitalize(firstName)} ${this.capitalize(lastName)}`,
      email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@company.com`,
      phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,
      title: ['Business Development Manager', 'Strategic Partnerships', 'Growth Lead'][Math.floor(Math.random() * 3)],
      company: 'LinkedIn Professional Network',
      industry: 'Professional Services',
      location: {
        city: 'San Francisco',
        state: 'California',
        country: 'United States'
      },
      socialProfiles: {
        linkedin: linkedinUrl,
        twitter: `https://twitter.com/${profileId.replace('-', '')}`,
        website: `https://${profileId.replace('-', '')}.com`
      },
      avatar: this.getRandomAvatar(),
      bio: 'LinkedIn professional with strong network and business development experience',
      notes: `LinkedIn profile analyzed by Gemini AI on ${new Date().toLocaleDateString()}`,
      confidence: Math.floor(Math.random() * 15) + 85
    };
  }

  async generatePersonalizedMessage(contact: any, messageType: 'email' | 'linkedin' | 'cold-outreach'): Promise<string> {
    console.log(`✍️ Gemini generating ${messageType} message for ${contact.name}`);
    
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const templates = {
      email: `Hi ${contact.firstName},\n\nI came across your profile and was impressed by your work at ${contact.company}. As a ${contact.title}, I imagine you're focused on driving growth and innovation.\n\nI'd love to share some insights that might be valuable for your current initiatives. Would you be open to a brief conversation?\n\nBest regards,\n[Your Name]`,
      
      linkedin: `Hi ${contact.firstName}, I noticed we share similar interests in ${contact.industry || 'business development'}. Your experience at ${contact.company} is impressive! I'd love to connect and exchange insights about industry trends.`,
      
      'cold-outreach': `Hello ${contact.firstName},\n\nI hope this message finds you well. I've been researching leaders in ${contact.industry || 'your industry'} and your work at ${contact.company} caught my attention.\n\nI believe there might be some interesting synergies between what you're doing and some solutions we've developed. Would you be interested in a brief conversation to explore potential collaboration?\n\nLooking forward to connecting!\n\nBest,\n[Your Name]`
    };
    
    return templates[messageType];
  }

  async analyzeContactEngagement(contact: any): Promise<{
    engagementScore: number;
    recommendations: string[];
    bestContactTime: string;
    preferredChannel: string;
  }> {
    console.log(`📊 Gemini analyzing engagement for ${contact.name}`);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      engagementScore: Math.floor(Math.random() * 40) + 60,
      recommendations: [
        'Focus on industry-specific value propositions',
        'Share relevant case studies from similar companies',
        'Propose a short discovery call',
        'Connect on LinkedIn before direct outreach'
      ],
      bestContactTime: 'Tuesday-Thursday, 2-4 PM',
      preferredChannel: Math.random() > 0.5 ? 'email' : 'linkedin'
    };
  }

  async findSimilarContacts(contact: any): Promise<Array<{
    name: string;
    company: string;
    similarity: number;
    reason: string;
  }>> {
    console.log(`🔍 Gemini finding similar contacts to ${contact.name}`);
    
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    return [
      {
        name: 'Sarah Johnson',
        company: 'TechFlow Solutions',
        similarity: 87,
        reason: 'Same industry and role level'
      },
      {
        name: 'Michael Chen',
        company: 'Innovation Labs',
        similarity: 82,
        reason: 'Similar company size and market focus'
      },
      {
        name: 'Emily Rodriguez',
        company: 'Future Systems',
        similarity: 78,
        reason: 'Comparable decision-making authority'
      }
    ];
  }

  private capitalize(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  }

  private getRandomAvatar(): string {
    const avatars = [
      'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',
      'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',
      'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',
      'https://images.pexels.com/photos/1181686/pexels-photo-1181686.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2',
      'https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2'
    ];
    return avatars[Math.floor(Math.random() * avatars.length)];
  }
}

export const geminiService = new GeminiAIService();